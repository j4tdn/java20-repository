1. Tính chất đóng gói - Encapsulation

Definition: Tính chất đóng gói được thể hiện qua các access modifier
	+ 		private : đóng gói trong phạm vi class
	+ _ | protected : đóng gói trong phạm vi của package
	+ 		 public : được sử dụng ở bất kỳ đâu trong dự án

----------------------------------------------------------------------------------
2. Tính chất đa hình - polymorphism

Definition: Tính chất đa hình có 2 loại
	+ Đa hình trong phương thức
	+ Đa hình trong đối tượng
	Phương thức, đối tượng được gọi là đa hình nếu cùng 1 đối tượng, phương thức nhưng lúc thì có thể hiện này, khác 
	--> đa hình
	
	2.1: Đa hình trong phương thức 
		+ Overloading 
			Hai/Nhiều phương thức được gọi là Overloading nếu 
			+ Cùng 1 class
			+ Cùng tên
			+ Khác số lượng tham số
			+ Khác KDL truyền vào của tham số
			VD: int sum(int, int)
				int sum(int, int, int)
				float sum(float, float)

		+ Overriding
			Hai/Nhiều phương thức được gọi là Overriding nếu
			+ Cùng phần khai báo hàm VD: void log()
			+ Thuộc 2/n class có quan hệ cha con
			+ Lớp con định nghĩa/override lại thân hàm từ hàm ở lớp cha
			VD: toString, equals, log
	
	2.2: Đa hình trong đối tượng
		Lấy, gán giá trị của KDL cha/con cho KDL cha
		Nói cách khác: Lấy biến kiểu cha = kiểu cha/con
		Mục đích: 
				+ Giúp chuyển đổi qua về giữa các KDL cha/con
				+ Tạo một mảng/danh sách các phần tử kiểu cha con
				+ Viết ra phương thức chung có tham số là KDL cha để nhận vào giá trị thuộc KDL cha/con
				VD: callShapeMethods(Shape shape)
				
3. Tính chất thừa kế - Inheritance

Definition: Khi 2/N đối tượng có chung thuộc tính, phương thức, thay vì ở mỗi class phải tạo nhiều lần các thuộc
tính, phương thức đó (trùng lặp code, không tổng quát hóa) thì mình sẽ tạo ra KIỂU CHA chung để chứa tt,pt chung đó

VD: Sách giáo khoa: Mã sách, tên sách, nhà xuất bản, trạng thái(ENUM) [cũ,mới], giảm giá
	Sách tham khảo: Mã sách, tên sách, nhà xuất bản, thuế(%)
	
KDL Cha/Con: Class, Interface, Abstract Class
+ KDL Cha: Class
+ KDL Con: Class
==> Khi KDL(s) con có chung thuộc tính --> đưa những thuộc tính chung đó vào class cha rồi lấy class con kế thừa, reuse.

KDL Cha: Interface
KDL Con: Class
==> Khi KDL(s) con có chung phương thức 
	--> đưa phương thức 'chung' (biết phần declare[tên hàm,KDL trả về]) vào KDL cha nhưng mình chưa biết phần thực thi.
	--> Hàm chung trong KDL cha nên là không có BODY --> KDL interface
	--> KDL con khi kế thừa từ KDL cha thì bắt buộc phải override lại hàm 'chung' đó
	
+ KDL Cha: Abstract Class
+ KDL Con: Class
==> Khi KDL cha vừa có hàm trừu tượng(abstract methods) và có hàm bình thường(body method)
	--> Nó vẫn là class -> có thể chứa thuộc tính chung của KDL con 
	
What is difference between interface & abtract class
--> Answer: 
Difference
	+ Interface
		- Support multiple implements
		- attribute --> auto 'public static final'
		- method --> auto 'public abstract'
	+ Abstract class
		- support single extends
		- attributes -> nothing special, belong to object scope
		- method --> depends on 'access modifier'
From JDK 1.0 -> 1.7
	+ Interface:
		- Only have abstract methods
		
	+ Abstract class
		- Can have abstract & body methods
From JDL 1.8 -> Now
	+ Interface:
		- Can have abstract & body methods(default, static, private)
		
	+ Abstract class
		- Can have abstract & body methods
		
Abstraction
Class -> La k/n truu tuong dung de chi tap hop cac doi tuong co chung
+ tt, pt
Car1,Car2,Car3 --> car
Coding
--> Tao ra cac abstract method chung cho kDL cha, sau do con se override kai
VD: CalS, tinhS, tinhDienTich, tinhDT