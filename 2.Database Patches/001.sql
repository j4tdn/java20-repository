-- Patches to creating tables
-- ITEM_GROUP, ITEM, SIZE, ITEM_DETAIL

USE java20_shopping;


-- create table ITEM_GROUP
DROP TABLE IF EXISTS ITEM_GROUP;
CREATE TABLE ITEM_GROUP 
(
	ID INT ,
    `NAME` VARCHAR(100) NOT NULL,
	PRIMARY KEY (ID) -- KO CẦN ĐẶT TÊN CHO RÀNG BUỘC PRIMARY KEY
);

-- create table ITEM
DROP TABLE IF EXISTS ITEM;
CREATE TABLE ITEM
(
	ID INT, 
    MATERIAL      VARCHAR(100) NOT NULL,
    BUY_PRICE     FLOAT NOT NULL,
	COLOR         VARCHAR(50) NOT NULL,
    ITEM_GROUP_ID INT NOT NULL, -- khoá ngoại không bắt buộc phải khác null,
    PRIMARY KEY (ID),
    CONSTRAINT FK_ITEM_ITEM_GROUP FOREIGN KEY (ITEM_GROUP_ID) REFERENCES ITEM_GROUP (ID)
);
ALTER TABLE ITEM ADD PRIMARY KEY (ID);

-- create table SIZE
CREATE TABLE SIZE
(
	ID INT, 
    `KEY` VARCHAR (10) NOT NULL,
    `GENDER` BIT NOT NULL, 
    `DESC` TEXT NOT NULL,
    PRIMARY KEY (ID),
	CONSTRAINT CHK_SIZE_KEY CHECK (`KEY` IN ('S', 'M', 'L', 'XL', 'XXL', 'XXXL')),
    CONSTRAINT CHK_GENDER CHECK (`GENDER` IN (0, 1))
);

-- chưa học - thử
-- TRUNCATE SIZE; -- tương tự DELETE FROM SIZE
-- SELECT * FROM SIZE;
-- INSERT INTO SIZE VALUES(1, 'Sll', 0, 'Nữ cân nặng bé hơn 40kg'); 
-- INSERT INTO SIZE VALUES(2, 'S', 1, 'Nam cân nặng hơn 50kg');

-- create table ITEM_DETAIL
DROP TABLE IF EXISTS ITEM_DETAIL;
CREATE TABLE ITEM_DETAIL
(
	ID INT,
    ITEM_ID INT NOT NULL,
    SIZE_ID INT NOT NULL,
    AMOUNT INT NOT NULL,
    SALES_PRICE FLOAT NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT UNQ_ITEM_SIZE UNIQUE (ITEM_ID, SIZE_ID),
    CONSTRAINT FK_ITEM_DETAIL_ITEM FOREIGN KEY (ITEM_ID) REFERENCES ITEM(ID),
    CONSTRAINT FK_ITEM_DETAIL_SIZE FOREIGN KEY (SIZE_ID) REFERENCES SIZE(ID)
);
ALTER TABLE ITEM_DETAIL 
ADD CONSTRAINT FK_ITEM_DETAIL_ITEM FOREIGN KEY (ITEM_ID) REFERENCES ITEM(ID);
ALTER TABLE ITEM_DETAIL
ADD CONSTRAINT FK_ITEM_DETAIL_SIZE FOREIGN KEY (SIZE_ID) REFERENCES SIZE(ID);

-- Patches to create table
-- CUSTOMER, 
-- create table CUSTOMER 
DROP TABLE IF EXISTS CUSTOMER;
CREATE TABLE CUSTOMER
(
	ID INT,
    `NAME` VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(100) NOT NULL,
    ADDRESS VARCHAR(100) NOT NULL,
    PHONE VARCHAR(20) NOT NULL,
    `PASSWORD` VARCHAR(100) NOT NULL,
    PRIMARY KEY (ID)
);

-- Patches to create table
--  DEPARTMENT, EMPLOYEE
-- create table DEPARTMENT
DROP TABLE IF EXISTS DEPARTMENT;
CREATE TABLE DEPARTMENT
(
	ID INT, 
    `NAME` VARCHAR(100) NOT NULL,
    PRIMARY KEY (ID)
);

-- create table EMPLOYEE
DROP TABLE IF EXISTS EMPLOYEE;
CREATE TABLE EMPLOYEE
(
	ID INT, 
    `NAME` VARCHAR(100) NOT NULL,
    ADDRESS VARCHAR(100) NOT NULL,
    PHONE VARCHAR(100) NOT NULL,
    DEPARTMENT_ID INT NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT FK_EMPLOYEE_DEPARTMENT FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(ID)
);

-- Patches to create table
--  PAYMENT_METHOD, ORDER_STATUS
-- create table PAYMENT_METHOD

DROP TABLE IF EXISTS PAYMENT_METHOD;
CREATE TABLE PAYMENT_METHOD
(
	ID INT,
    `DESC` TEXT NOT NULL,
    PRIMARY KEY (ID)
);

-- create table ORDER_STATUS
DROP TABLE IF EXISTS ORDER_STATUS;
CREATE TABLE ORDER_STATUS
(
	ID INT,
    `DESC` TEXT NOT NULL,
    PRIMARY KEY(ID)
);

-- Patches to create table
--  ORDER, BILL, ORDER_DETAIL, ORDER_STATUS_DETAIL
-- create table ORDER
DROP TABLE IF EXISTS `ORDER`;
CREATE TABLE `ORDER`
(
	ID INT,
    DELIVERY_FEE FLOAT,
    CREATED_AT DATETIME NOT NULL,
    PAYMENT_METHOD_ID INT NOT NULL,
    EMPLOYEE_ID INT NOT NULL,
    CUSTOMER_ID INT NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT FK_ORDER_PAYMENT_METHOD FOREIGN KEY (PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHOD(ID),
    CONSTRAINT FK_ORDER_EMPLOYEE       FOREIGN KEY (EMPLOYEE_ID)       REFERENCES EMPLOYEE(ID),
    CONSTRAINT FK_ORDER_CUSTEMER       FOREIGN KEY (CUSTOMER_ID)       REFERENCES CUSTOMER(ID)
);

-- create table BILL
DROP TABLE IF EXISTS BILL;
CREATE TABLE BILL
(
	ID INT, 
    CREATED_AT DATETIME NOT NULL,
    TOTAL_OF_MONEY FLOAT NOT NULL,
    ORDER_ID INT NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT FK_BILL_ORDER FOREIGN KEY (ORDER_ID) REFERENCES `ORDER`(ID)
);

-- create table ORDER_DETAIL
DROP TABLE IF EXISTS ORDER_DETAIL;
CREATE TABLE ORDER_DETAIL
(
	ID INT,
    ORDER_ID INT NOT NULL,
    ITEM_ID INT NOT NULL,
    AMOUNT INT NOT NULL,
    PRIMARY KEY(ID),
    CONSTRAINT UNQ_ORDER_ITEM UNIQUE (ORDER_ID, ITEM_ID),
    CONSTRAINT FK_ORDER_DETAIL_ORDER FOREIGN KEY (ORDER_ID) REFERENCES `ORDER`(ID),
    CONSTRAINT FK_ORDER_DETAIL_ITEM FOREIGN KEY (ITEM_ID) REFERENCES ITEM(ID)
);

-- create table ORDER_STATUS_DETAIL
DROP TABLE IF EXISTS ORDER_STATUS_DETAIL;
CREATE TABLE ORDER_STATUS_DETAIL
(
	ID INT, 
    UPDATED_AT DATETIME NOT NULL,
    ORDER_ID INT NOT NULL,
    ORDER_STATUS_ID INT NOT NULL,
    EMPLOYEE_ID INT NOT NULL,
    PRIMARY KEY(ID),
    CONSTRAINT UNQ_ORDER_ORDER_STATUS UNIQUE (ORDER_ID, ORDER_STATUS_ID),
    CONSTRAINT FK_ORDER_STATUS_DETAIL_ORDER FOREIGN KEY (ORDER_ID) REFERENCES `ORDER`(ID),
	CONSTRAINT FK_ORDER_STATUS_DETAIL_ORDER_STATUS FOREIGN KEY (ORDER_STATUS_ID) REFERENCES ORDER_STATUS(ID),
	CONSTRAINT FK_ORDER_STATUS_DETAIL_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE(ID)
);



 